# =====================================================
# DOCKERFILE OPTIMISÉ RENDER - VERSION DEBIAN SLIM
# Objectif: <1GB, compatible ML packages
# =====================================================

# =====================================================
# STAGE 1: Builder avec dépendances
# =====================================================
FROM python:3.11-slim AS builder

# Variables d'environnement
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Installation dépendances système pour compilation
RUN apt-get update && apt-get install -y \
    --no-install-recommends \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

# Répertoire de travail
WORKDIR /app

# Installation des dépendances Python dans un venv
COPY requirements.txt .
RUN python -m venv /opt/venv && \
    /opt/venv/bin/pip install --upgrade pip && \
    /opt/venv/bin/pip install --no-cache-dir -r requirements.txt

# =====================================================
# STAGE 2: Runtime ultra-léger
# =====================================================
FROM python:3.11-slim AS runtime

# Variables d'environnement production
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PATH="/opt/venv/bin:$PATH" \
    PORT=8000

# Installation UNIQUEMENT des dépendances runtime
RUN apt-get update && apt-get install -y \
    --no-install-recommends \
    && rm -rf /var/lib/apt/lists/* \
    && groupadd -r churn \
    && useradd -r -g churn churn

# Copie du venv depuis le builder (packages déjà compilés)
COPY --from=builder --chown=churn:churn /opt/venv /opt/venv

# Répertoire de travail
WORKDIR /app

# Copie SEULEMENT des fichiers nécessaires
COPY --chown=churn:churn api/ ./api/
COPY --chown=churn:churn src/ ./src/
COPY --chown=churn:churn config/ ./config/
COPY --chown=churn:churn models_production/ ./models_production/
COPY --chown=churn:churn encoders_churn/ ./encoders_churn/

# Création des __init__.py manquants
RUN touch api/__init__.py src/__init__.py config/__init__.py || true

# Nettoyage agressif pour réduire la taille
RUN find . -type f -name "*.pyc" -delete && \
    find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true && \
    find . -type f -name "*.pyo" -delete && \
    apt-get autoremove -y && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Changement vers utilisateur non-root
USER churn

# Port exposé
EXPOSE $PORT

# Health check optimisé pour Render
HEALTHCHECK --interval=30s --timeout=15s --start-period=10s --retries=3 \
    CMD python -c "import urllib.request; urllib.request.urlopen('http://localhost:$PORT/health', timeout=10)" || exit 1

# Commande optimisée pour Render (1 worker = 512MB RAM)
CMD ["python", "-m", "uvicorn", "api.main:app", "--host", "0.0.0.0", "--port", "8000", "--workers", "1"]